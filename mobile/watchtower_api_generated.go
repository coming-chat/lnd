// Code generated by falafel 0.9.2. DO NOT EDIT.
// source: ./watchtower_api_generated.go

//go:build watchtowerrpc
// +build watchtowerrpc

package lndmobile

import (
	"context"
	"net"

	"github.com/golang/protobuf/proto"
	"google.golang.org/grpc"

	"github.com/lightningnetwork/lnd/lnrpc/watchtowerrpc"
)

// setWatchtowerDialOption sets the given method as the way
// to retrieve gprc options for the service.
func setWatchtowerDialOption(f func() ([]grpc.DialOption, error)) {
	serviceDialOptionsMtx.Lock()
	defer serviceDialOptionsMtx.Unlock()

	serviceDialOptions["Watchtower"] = f
}

// applyWatchtowerDialOptions returns extra grpc options to
// use when calling the service.
func applyWatchtowerDialOptions() ([]grpc.DialOption, error) {
	serviceDialOptionsMtx.Lock()
	defer serviceDialOptionsMtx.Unlock()

	// First check the service options map, if there are any options
	// specific to this service.
	f, ok := serviceDialOptions["Watchtower"]
	if ok {
		return f()
	}

	// Otherwise return the default options.
	return defaultDialOptions()
}

// getWatchtowerConn dials Watchtower with the current dial options,
// and returns the grpc client connection.
func getWatchtowerConn() (*grpc.ClientConn, func(), error) {
	conn, err := lightningLis.Dial()
	if err != nil {
		return nil, nil, err
	}

	// Set up a custom dialer using the listener conn.
	dialer := func(context.Context, string) (net.Conn, error) {
		return conn, nil
	}

	// Create a dial options array.
	opts := []grpc.DialOption{
		grpc.WithContextDialer(dialer),
	}

	// Apply any extra server options.
	extraOpts, err := applyWatchtowerDialOptions()
	if err != nil {
		return nil, nil, err
	}

	opts = append(opts, extraOpts...)

	// As address we use "localhost" to mimic a local connection.
	address := "localhost"
	clientConn, err := grpc.Dial(address, opts...)
	if err != nil {
		conn.Close()
		return nil, nil, err
	}

	closeConn := func() {
		conn.Close()
	}

	return clientConn, closeConn, nil
}

// getWatchtowerClient returns a client connection to the server listening
// on lis.
func getWatchtowerClient() (watchtowerrpc.WatchtowerClient, func(), error) {
	clientConn, closeConn, err := getWatchtowerConn()
	if err != nil {
		return nil, nil, err
	}
	client := watchtowerrpc.NewWatchtowerClient(clientConn)
	return client, closeConn, nil
}

// GetInfo returns general information concerning the companion watchtower
// including its public key and URIs where the server is currently
// listening for clients.
//
// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func WatchtowerGetInfo(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &watchtowerrpc.GetInfoRequest{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getWatchtowerClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*watchtowerrpc.GetInfoRequest)
			return client.GetInfo(ctx, r)
		},
	}
	s.start(msg, callback)
}
