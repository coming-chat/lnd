// Code generated by falafel 0.9.2. DO NOT EDIT.
// source: ./watchtowerclient_api_generated.go

//go:build wtclientrpc
// +build wtclientrpc

package lndmobile

import (
	"context"
	"net"

	"github.com/golang/protobuf/proto"
	"google.golang.org/grpc"

	"github.com/lightningnetwork/lnd/lnrpc/wtclientrpc"
)

// setWatchtowerClientDialOption sets the given method as the way
// to retrieve gprc options for the service.
func setWatchtowerClientDialOption(f func() ([]grpc.DialOption, error)) {
	serviceDialOptionsMtx.Lock()
	defer serviceDialOptionsMtx.Unlock()

	serviceDialOptions["WatchtowerClient"] = f
}

// applyWatchtowerClientDialOptions returns extra grpc options to
// use when calling the service.
func applyWatchtowerClientDialOptions() ([]grpc.DialOption, error) {
	serviceDialOptionsMtx.Lock()
	defer serviceDialOptionsMtx.Unlock()

	// First check the service options map, if there are any options
	// specific to this service.
	f, ok := serviceDialOptions["WatchtowerClient"]
	if ok {
		return f()
	}

	// Otherwise return the default options.
	return defaultDialOptions()
}

// getWatchtowerClientConn dials WatchtowerClient with the current dial options,
// and returns the grpc client connection.
func getWatchtowerClientConn() (*grpc.ClientConn, func(), error) {
	conn, err := lightningLis.Dial()
	if err != nil {
		return nil, nil, err
	}

	// Set up a custom dialer using the listener conn.
	dialer := func(context.Context, string) (net.Conn, error) {
		return conn, nil
	}

	// Create a dial options array.
	opts := []grpc.DialOption{
		grpc.WithContextDialer(dialer),
	}

	// Apply any extra server options.
	extraOpts, err := applyWatchtowerClientDialOptions()
	if err != nil {
		return nil, nil, err
	}

	opts = append(opts, extraOpts...)

	// As address we use "localhost" to mimic a local connection.
	address := "localhost"
	clientConn, err := grpc.Dial(address, opts...)
	if err != nil {
		conn.Close()
		return nil, nil, err
	}

	closeConn := func() {
		conn.Close()
	}

	return clientConn, closeConn, nil
}

// getWatchtowerClientClient returns a client connection to the server listening
// on lis.
func getWatchtowerClientClient() (wtclientrpc.WatchtowerClientClient, func(), error) {
	clientConn, closeConn, err := getWatchtowerClientConn()
	if err != nil {
		return nil, nil, err
	}
	client := wtclientrpc.NewWatchtowerClientClient(clientConn)
	return client, closeConn, nil
}

// AddTower adds a new watchtower reachable at the given address and
// considers it for new sessions. If the watchtower already exists, then
// any new addresses included will be considered when dialing it for
// session negotiations and backups.
//
// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func WatchtowerClientAddTower(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &wtclientrpc.AddTowerRequest{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getWatchtowerClientClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*wtclientrpc.AddTowerRequest)
			return client.AddTower(ctx, r)
		},
	}
	s.start(msg, callback)
}

// RemoveTower removes a watchtower from being considered for future session
// negotiations and from being used for any subsequent backups until it's added
// again. If an address is provided, then this RPC only serves as a way of
// removing the address from the watchtower instead.
//
// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func WatchtowerClientRemoveTower(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &wtclientrpc.RemoveTowerRequest{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getWatchtowerClientClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*wtclientrpc.RemoveTowerRequest)
			return client.RemoveTower(ctx, r)
		},
	}
	s.start(msg, callback)
}

// DeactivateTower sets the given tower's status to inactive so that it
// is not considered for session negotiation. Its sessions will also not
// be used while the tower is inactive.
//
// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func WatchtowerClientDeactivateTower(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &wtclientrpc.DeactivateTowerRequest{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getWatchtowerClientClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*wtclientrpc.DeactivateTowerRequest)
			return client.DeactivateTower(ctx, r)
		},
	}
	s.start(msg, callback)
}

// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func WatchtowerClientTerminateSession(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &wtclientrpc.TerminateSessionRequest{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getWatchtowerClientClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*wtclientrpc.TerminateSessionRequest)
			return client.TerminateSession(ctx, r)
		},
	}
	s.start(msg, callback)
}

// ListTowers returns the list of watchtowers registered with the client.
//
// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func WatchtowerClientListTowers(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &wtclientrpc.ListTowersRequest{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getWatchtowerClientClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*wtclientrpc.ListTowersRequest)
			return client.ListTowers(ctx, r)
		},
	}
	s.start(msg, callback)
}

// GetTowerInfo retrieves information for a registered watchtower.
//
// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func WatchtowerClientGetTowerInfo(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &wtclientrpc.GetTowerInfoRequest{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getWatchtowerClientClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*wtclientrpc.GetTowerInfoRequest)
			return client.GetTowerInfo(ctx, r)
		},
	}
	s.start(msg, callback)
}

// Stats returns the in-memory statistics of the client since startup.
//
// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func WatchtowerClientStats(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &wtclientrpc.StatsRequest{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getWatchtowerClientClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*wtclientrpc.StatsRequest)
			return client.Stats(ctx, r)
		},
	}
	s.start(msg, callback)
}

// Policy returns the active watchtower client policy configuration.
//
// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func WatchtowerClientPolicy(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &wtclientrpc.PolicyRequest{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getWatchtowerClientClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*wtclientrpc.PolicyRequest)
			return client.Policy(ctx, r)
		},
	}
	s.start(msg, callback)
}
