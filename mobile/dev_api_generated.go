// Code generated by falafel 0.9.2. DO NOT EDIT.
// source: ./dev_api_generated.go

//go:build devrpc
// +build devrpc

package lndmobile

import (
	"context"
	"net"

	"github.com/golang/protobuf/proto"
	"google.golang.org/grpc"

	"github.com/lightningnetwork/lnd/lnrpc"
	"github.com/lightningnetwork/lnd/lnrpc/devrpc"
)

// setDevDialOption sets the given method as the way
// to retrieve gprc options for the service.
func setDevDialOption(f func() ([]grpc.DialOption, error)) {
	serviceDialOptionsMtx.Lock()
	defer serviceDialOptionsMtx.Unlock()

	serviceDialOptions["Dev"] = f
}

// applyDevDialOptions returns extra grpc options to
// use when calling the service.
func applyDevDialOptions() ([]grpc.DialOption, error) {
	serviceDialOptionsMtx.Lock()
	defer serviceDialOptionsMtx.Unlock()

	// First check the service options map, if there are any options
	// specific to this service.
	f, ok := serviceDialOptions["Dev"]
	if ok {
		return f()
	}

	// Otherwise return the default options.
	return defaultDialOptions()
}

// getDevConn dials Dev with the current dial options,
// and returns the grpc client connection.
func getDevConn() (*grpc.ClientConn, func(), error) {
	conn, err := lightningLis.Dial()
	if err != nil {
		return nil, nil, err
	}

	// Set up a custom dialer using the listener conn.
	dialer := func(context.Context, string) (net.Conn, error) {
		return conn, nil
	}

	// Create a dial options array.
	opts := []grpc.DialOption{
		grpc.WithContextDialer(dialer),
	}

	// Apply any extra server options.
	extraOpts, err := applyDevDialOptions()
	if err != nil {
		return nil, nil, err
	}

	opts = append(opts, extraOpts...)

	// As address we use "localhost" to mimic a local connection.
	address := "localhost"
	clientConn, err := grpc.Dial(address, opts...)
	if err != nil {
		conn.Close()
		return nil, nil, err
	}

	closeConn := func() {
		conn.Close()
	}

	return clientConn, closeConn, nil
}

// getDevClient returns a client connection to the server listening
// on lis.
func getDevClient() (devrpc.DevClient, func(), error) {
	clientConn, closeConn, err := getDevConn()
	if err != nil {
		return nil, nil, err
	}
	client := devrpc.NewDevClient(clientConn)
	return client, closeConn, nil
}

// ImportGraph imports a ChannelGraph into the graph database. Should only be
// used for development.
//
// NOTE: This method produces a single result or error, and the callback will
// be called only once.
func DevImportGraph(msg []byte, callback Callback) {
	s := &syncHandler{
		newProto: func() proto.Message {
			return &lnrpc.ChannelGraph{}
		},
		getSync: func(ctx context.Context,
			req proto.Message) (proto.Message, error) {

			// Get the gRPC client.
			client, closeClient, err := getDevClient()
			if err != nil {
				return nil, err
			}
			defer closeClient()

			r := req.(*lnrpc.ChannelGraph)
			return client.ImportGraph(ctx, r)
		},
	}
	s.start(msg, callback)
}
